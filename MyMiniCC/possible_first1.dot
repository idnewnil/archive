strict digraph possible_first {
    graph [dpi=200];

    "additiveexpression" [shape=box];
    "addop" [shape=box];
    "arglist" [shape=box];
    "args" [shape=box];
    "call" [shape=box];
    "compoundstmt" [shape=box];
    "declaration" [shape=box];
    "declarationlist" [shape=box];
    "expression" [shape=box];
    "expressionstmt" [shape=box];
    "factor" [shape=box];
    "fundeclaration" [shape=box];
    "iterationstmt" [shape=box];
    "localdeclarations" [shape=box];
    "mulop" [shape=box];
    "param" [shape=box];
    "paramlist" [shape=box];
    "params" [shape=box];
    "program" [shape=box];
    "relop" [shape=box];
    "returnstmt" [shape=box];
    "selectionstmt" [shape=box];
    "simpleexpression" [shape=box];
    "statement" [shape=box];
    "statementlist" [shape=box];
    "term" [shape=box];
    "typespecifier" [shape=box];
    "var" [shape=box];
    "vardeclaration" [shape=box];
    "additiveexpression" -> "additiveexpression";
    "additiveexpression" -> "term";
    "addop" -> "+";
    "addop" -> "-";
    "arglist" -> "arglist";
    "arglist" -> "expression";
    "args" -> "arglist";
    "args" -> "empty";
    "call" -> "ID";
    "compoundstmt" -> "{";
    "declaration" -> "fundeclaration";
    "declaration" -> "vardeclaration";
    "declarationlist" -> "declaration";
    "declarationlist" -> "declarationlist";
    "expression" -> "simpleexpression";
    "expression" -> "var";
    "expressionstmt" -> ";";
    "expressionstmt" -> "expression";
    "factor" -> "(";
    "factor" -> "NUM";
    "factor" -> "call";
    "factor" -> "var";
    "fundeclaration" -> "typespecifier";
    "iterationstmt" -> "while";
    "localdeclarations" -> "empty";
    "localdeclarations" -> "localdeclarations";
    "localdeclarations" -> "vardeclaration";
    "mulop" -> "*";
    "mulop" -> "/";
    "param" -> "typespecifier";
    "paramlist" -> "param";
    "paramlist" -> "paramlist";
    "params" -> "paramlist";
    "params" -> "void";
    "program" -> "declarationlist";
    "relop" -> "!=";
    "relop" -> "<";
    "relop" -> "<=";
    "relop" -> "==";
    "relop" -> ">";
    "relop" -> ">=";
    "returnstmt" -> "return";
    "selectionstmt" -> "if";
    "simpleexpression" -> "additiveexpression";
    "statement" -> "compoundstmt";
    "statement" -> "expressionstmt";
    "statement" -> "iterationstmt";
    "statement" -> "returnstmt";
    "statement" -> "selectionstmt";
    "statementlist" -> "empty";
    "statementlist" -> "statement";
    "statementlist" -> "statementlist";
    "term" -> "factor";
    "term" -> "term";
    "typespecifier" -> "int";
    "typespecifier" -> "void";
    "var" -> "ID";
    "vardeclaration" -> "typespecifier";
}